use common::model::ModelType;
use common::network;
use common::aspects::{RenderAspect, SynchronizedAspect};

use time::Tm;

/**
 * An aspect for an entity representing a player.
 *
 * Contains the player's network information.
 */
#[derive(Debug, Clone)]
pub struct PlayerAspect {
  pub address: network::Address,
  pub last_msg: Tm,
  pub connected: bool,
}

impl PlayerAspect {
  pub fn new(address: network::Address, connected: bool) -> PlayerAspect {
    PlayerAspect {
      address: address,
      last_msg: time::now(),
      connected: connected,
    }
  }
}

impl specs::Component for PlayerAspect {
  type Storage = specs::HashMapStorage<PlayerAspect>;
}

/**
 * An aspect for an entity that "possesses" another entity.
 *
 * Contains a reference to that other entity in question.
 *
 * Players are common implementors -- they can possess a world object and control it.
 */
#[derive(Debug, Clone)]
pub struct ControllerAspect {
  pub subject: SynchronizedAspect,
}

impl ControllerAspect {
  pub fn new(subject: SynchronizedAspect) -> ControllerAspect {
    ControllerAspect { subject: subject }
  }
}

impl specs::Component for ControllerAspect {
  type Storage = specs::HashMapStorage<ControllerAspect>;
}

/**
 * An aspect for an entity that can be collided with
 *
 * Contains the collision model to be checked against
 */
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CollisionAspect {
  pub model: ModelType,
}

impl CollisionAspect {
  pub fn new() -> CollisionAspect {
    CollisionAspect { model: ModelType::Cube }
  }

  pub fn from_render(render: &RenderAspect) -> CollisionAspect {
    CollisionAspect { model: render.model.clone() }
  }
}

impl specs::Component for CollisionAspect {
  type Storage = specs::VecStorage<CollisionAspect>;
}
