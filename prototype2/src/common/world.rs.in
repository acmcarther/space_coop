use std::collections::HashMap;

use uuid::Uuid;

// A lower fidelity version of the server world
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ClientWorld {
  pub entities: Vec<Entity>,
  pub rendered: HashMap<Entity, RenderAspect>,
  pub physical: HashMap<Entity, PhysicalAspect>
}

pub type Entity = Uuid;

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RenderAspect {
  model: String
}

impl RenderAspect {
  pub fn new() -> RenderAspect {
    RenderAspect { model: "dummy".to_owned() }
  }
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PhysicalAspect {
  pos: (f32, f32, f32),
  anchored: bool
}

impl PhysicalAspect{
  pub fn new(pos: (f32, f32, f32), anchored: bool) -> PhysicalAspect {
    PhysicalAspect { pos: pos, anchored: anchored }
  }
}

