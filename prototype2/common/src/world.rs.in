use std::collections::{HashMap, HashSet};
use specs;
use uuid::Uuid;
use std::fmt;

use model::ModelType;

/**
 * An aspect for an entity that can be rendered by a Renderer.
 *
 * Contains the details needed to render it.
 *
 * Most entities implementing RenderAspect also implement PhysicalAspect in order to be rendered
 * somewhere besides the origin of the scene.
 */
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RenderAspect {
  pub model: ModelType
}

impl RenderAspect {
  pub fn new() -> RenderAspect {
    RenderAspect { model: ModelType::Cube }
  }
  pub fn new_with(model: ModelType) -> RenderAspect {
    RenderAspect { model: model }
  }
}

impl specs::Component for RenderAspect {
  type Storage = specs::VecStorage<RenderAspect>;
}

/**
 * An aspect for an entity that has a physical presense in the scene
 *
 * Contains the physical location and whether the entity is mobile or not
 */
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PhysicalAspect {
  pub pos: (f32, f32, f32),
  pub vel: (f32, f32, f32),
  pub ang: (f32, f32, f32),
  pub ang_vel: (f32, f32, f32),
  pub anchored: bool
}

impl PhysicalAspect{
  pub fn new(pos: (f32, f32, f32), vel: (f32, f32, f32), anchored: bool) -> PhysicalAspect {
    PhysicalAspect { pos: pos, vel: vel, ang: (0.0, 0.0, 0.0), ang_vel: (0.0, 0.0, 0.0), anchored: anchored }
  }

  pub fn duplicate_with_pos(&self, pos: (f32, f32, f32)) -> PhysicalAspect {
    PhysicalAspect { pos: pos, vel: self.vel.clone(), ang: self.ang.clone(), ang_vel: self.ang_vel.clone(), anchored: self.anchored.clone() }
  }
}

impl specs::Component for PhysicalAspect {
  type Storage = specs::VecStorage<PhysicalAspect>;
}

#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct DisabledAspect;

impl DisabledAspect {
  pub fn new() -> DisabledAspect {
    DisabledAspect
  }
}


impl specs::Component for DisabledAspect {
  type Storage = specs::HashMapStorage<DisabledAspect>;
}


/**
 * An aspect indicating that this entity is synchronized between the server and client.
 *
 * - Synchro on client but not on server is deleted from client
 * - Synchro on server but not on client is inserted into client
 * - Shared synchros are updated from snapshot sent by server
 *
 * Also used by ControllerAspect to indicate which synchronized entity it controls.
 */
#[derive(Serialize, Deserialize, Debug, Clone, Eq, PartialEq, Hash)]
pub struct SynchronizedAspect(Uuid);

impl SynchronizedAspect {
  pub fn new() -> SynchronizedAspect {
    SynchronizedAspect(Uuid::new_v4())
  }

  pub fn new_from(uuid: Uuid) -> SynchronizedAspect {
    SynchronizedAspect(uuid)
  }

  pub fn starts_with<'a> (&'a self, pat: &'a str) -> bool {
    let &SynchronizedAspect(ref uuid) = self;

    uuid.to_string().starts_with(pat)
  }
}

impl fmt::Display for SynchronizedAspect {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    let &SynchronizedAspect(uuid) = self;
    write!(f, "{}", uuid)
  }
}

impl specs::Component for SynchronizedAspect {
  type Storage = specs::HashMapStorage<SynchronizedAspect>;
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CommonWorld {
  pub entities: HashSet<SynchronizedAspect>,
  pub own_entity: Option<SynchronizedAspect>,
  pub physical: HashMap<String, PhysicalAspect>,
  pub rendered: HashMap<String, RenderAspect>,
  pub disabled: HashMap<String, DisabledAspect>,
}
