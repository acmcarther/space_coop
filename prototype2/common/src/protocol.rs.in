use world::{SynchronizedAspect, PhysicalAspect, RenderAspect};

#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ClientNetworkEvent {
  Connect,
  Disconnect,
  KeepAlive,
  SnapshotAck(u16),
  DomainEvent(ClientEvent),
}


#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum ClientEvent {
  SelfMove {x_d: f32, y_d: f32, z_d: f32},
  // TODO: Administrative: Should have access controls
  MutatePhysicalAspect(SynchronizedAspect, PhysicalAspect),
  MutateRenderAspect(SynchronizedAspect, RenderAspect),
  DeleteEntity(SynchronizedAspect),
  CreateEntity
}

#[derive(Serialize, Deserialize, Debug, Clone, PartialEq)]
pub enum ServerNetworkEvent {
  Connected,
  Disconnected,
  KeepAlive,
  Error(String),
  Snapshot(SnapshotEvent),
}

#[derive(Serialize, Deserialize, PartialOrd, Ord, Debug, Clone, PartialEq, Eq)]
pub enum SnapshotEvent {
  PartialSnapshot(StateFragment)
}

#[derive(Serialize, Deserialize, PartialOrd, Ord, Debug, Clone, PartialEq, Eq)]
pub struct StateFragment {
  pub seq_num: u16,
  pub idx: u32,
  pub count: u32,
  pub payload: Vec<u8>
}
